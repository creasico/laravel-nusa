name: Tests

on:
  schedule: # scheduled to run at 23.00 on Saturday (UTC), means 6.00 on Monday (WIB)
    - cron: '0 23 * * 6'
  pull_request:
    branches: [main]
  push:
    branches: [main]
    # paths: ['.github/**.yml', 'src/*', 'tests/*']

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  configs:
    name: Configure
    uses: projek-xyz/actions/.github/workflows/configure.yml@main
    with:
      php-version: 8.2
      laravel-version: 11.x
    secrets:
      CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}

  upstream:
    name: Upstream Database
    runs-on: ubuntu-latest
    needs: configs
    outputs:
      has-changes: ${{ steps.stats.outputs.has-changes }}

    env:
      DB_USERNAME: root
      DB_PASSWORD: root
      DB_DATABASE: ${{ github.repository_owner }}
      UPSTREAM_DB_DATABASE: nusantara

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: true

      - name: Setup MySQL
        run: |
          sudo /etc/init.d/mysql start
          mysql -e "CREATE DATABASE $DB_DATABASE;" -u$DB_USERNAME -p$DB_PASSWORD
          mysql -e "CREATE DATABASE $UPSTREAM_DB_DATABASE;" -u$DB_USERNAME -p$DB_PASSWORD

      - name: Cache upstream
        id: upstream
        uses: actions/cache/restore@v4
        with:
          path: |
            database/nusa.*.sqlite
            !database/nusa.head-full.sqlite
          key: upstream-database_${{ needs.configs.outputs.target-branch }}_${{ hashFiles('**/*.sql') }}
          restore-keys: |
            upstream-database_${{ needs.configs.outputs.target-branch }}_

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          tools: composer:v2

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ${{ needs.configs.outputs.composer-cache-dir }}
          key: ${{ needs.configs.outputs.composer-cache-key }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ needs.configs.outputs.composer-cache-key }}-composer-

      - name: Install dependencies
        run: |
          composer update --prefer-dist --no-interaction --no-progress
          sudo apt-get install -y sqlite3-tools

      - name: Import databases
        if: ${{ steps.upstream.outputs.cache-hit == '' || needs.configs.outputs.target-branch == 'main' }}
        env:
          COLUMNS: 100
          GIT_BRANCH: ${{ needs.configs.outputs.target-branch }}
        run: |
          vendor/bin/testbench nusa:import --fresh --dist --ansi

      - name: Stat summary
        id: stats
        env:
          COLUMNS: 160
          GIT_BRANCH: ${{ needs.configs.outputs.target-branch }}
        run: |
          ls -lah database/*.sqlite
          vendor/bin/testbench nusa:stat --ansi

      - name: Cache upstream
        if: ${{ steps.stats.outputs.has-changes == '1' }}
        uses: actions/cache/save@v4
        with:
          path: |
            database/nusa.*.sqlite
            !database/nusa.head-full.sqlite
          key: upstream-database_${{ needs.configs.outputs.target-branch }}_${{ hashFiles('**/*.sql') }}

  tests:
    name: Test on PHP ${{ matrix.php }} Laravel ${{ matrix.laravel }} DB ${{ matrix.db }}
    if: ${{ needs.upstream.outputs.has-changes == '1' }}
    runs-on: ubuntu-latest
    needs: [configs, upstream]

    env:
      DB_CONNECTION: ${{ matrix.db }}
      DB_DATABASE: ${{ github.repository_owner }}
      DB_USERNAME: ${{ github.repository_owner }}
      DB_PASSWORD: secret

    services:
      postgresql:
        image: postgres:14
        env:
          POSTGRES_DB: ${{ env.DB_DATABASE }}
          POSTGRES_USER: ${{ env.DB_USERNAME }}
          POSTGRES_PASSWORD: ${{ env.DB_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd=pg_isready
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ env.DB_PASSWORD }}
          MYSQL_DATABASE: ${{ env.DB_DATABASE }}
          MYSQL_USER: ${{ env.DB_USERNAME }}
          MYSQL_PASSWORD: ${{ env.DB_PASSWORD }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    strategy:
      fail-fast: false
      matrix:
        db: [mysql, pgsql, sqlite]
        laravel: [11.x, 12.x]
        php: [8.4]
        include:
          - php: 8.3
            laravel: 11.x
            db: mysql

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup PHP ${{ matrix.php }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          ini-values: error_reporting=E_ALL
          tools: composer:v2
          coverage: xdebug
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}

      - name: Cache upstream
        id: upstream
        uses: actions/cache@v4
        with:
          path: |
            database/nusa.*.sqlite
            !database/nusa.head-full.sqlite
          key: upstream-database_${{ needs.configs.outputs.target-branch }}_${{ hashFiles('**/*.sql') }}
          restore-keys: |
            upstream-database_${{ needs.configs.outputs.target-branch }}_

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ${{ needs.configs.outputs.composer-cache-dir }}
          key: php-${{ matrix.php }}-l${{ matrix.laravel }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: php-${{ matrix.php }}-l${{ matrix.laravel }}-composer-

      - name: Install dependencies
        run: |
          composer require "laravel/framework=${{ matrix.laravel }}" --no-update
          composer update --prefer-dist --no-interaction --no-progress
          ls -lah database

      - name: Run tests
        env:
          COLUMNS: 100
          GIT_BRANCH: ${{ needs.configs.outputs.target-branch }}
        run: |
          vendor/bin/testbench migrate --ansi
          vendor/bin/testbench package:test --ansi --coverage

      - name: Generate reports for CodeClimate
        id: reports
        if: needs.configs.outputs.has-codeclimate == '1'
        env:
          CODECLIMATE_REPORT: tests/reports/codeclimate.PHP${{ matrix.php }}-L${{ matrix.laravel }}-${{ matrix.db }}.json
          CC_TEST_REPORTER_URL: ${{ vars.CC_TEST_REPORTER_URL }}
        run: |
          curl -LSs $CC_TEST_REPORTER_URL > ./cc-test-reporter && chmod +x ./cc-test-reporter
          ./cc-test-reporter format-coverage -t clover -o $CODECLIMATE_REPORT tests/reports/clover.xml

      - name: Store tests reports
        uses: actions/upload-artifact@v4
        if: needs.configs.outputs.has-codeclimate == '1'
        with:
          retention-days: 14
          name: test-reports-PHP${{ matrix.php }}-L${{ matrix.laravel }}-${{ matrix.db }}
          path: tests/reports/codeclimate.*.json

  reports:
    name: Report Test Coverages
    needs: [configs, tests]
    if: needs.configs.outputs.should-reports == '1'
    uses: projek-xyz/actions/.github/workflows/report.yml@main
    secrets:
      CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
    with:
      has-coveralls: ${{ needs.configs.outputs.has-coveralls == '1' }}
      has-codeclimate: ${{ needs.configs.outputs.has-codeclimate == '1' }}
